name: github actions ci/cd

# main 브랜치에 pr 이벤트가 발생하면 workflow가 발생한다.
on:
  pull_request:
    branches: ["main"]

#테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses : actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    # - name: make application-database.yaml
    #   run: |
    #     # create application-database.yaml
    #     cd ./src/main/resources

    #     # application-database.yaml 파일 생성
    #     touch ./application-database.yaml

    #     # GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기
    #     echo "${{ secrets.DATABASE }}" >> ./application-database.yaml
    #   shell: bash

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant Execute Permission For Gradlew
      run: chmod +x gradlew
    - name: Build With Gradle
      run: ./gradlew build -x test

      # build Test
    - name: 테스트 코드 실행
      run: ./gradlew --info test

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: ${{ always() }}
      with:
        files: build/test-results/**/*.xml
        
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'
